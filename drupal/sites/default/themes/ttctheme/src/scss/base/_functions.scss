// @file
// Place your functions here. Feel free to roll your own functions.

/// Throws a warning or an error depending on the value of `$quiet`.
/// @type Function
/// @throws A warning, if `$quiet` is true (default).
/// @throws An error, if `$quiet` is overridden to false.
/// @returns null
@function throw($message) {
	$quiet: true !default;

	@if $quiet {
		@warn $message;
		@return null;
	}
	@else {
		@error $message;
		@return null;
	}
}

/// Returns a specified palette tone from the palette map.
/// @type Function
/// @requires {variable} $palettes - The map of palettes.
/// @param {String} $palette - The palette to use.
/// @param {String} $tone ["base"] - The tone to choose from the given palette.
/// @throws If `$palette` does not exist in the `$palettes` map.
/// @throws If `$tone` does not exist in the specified `$palette`.
/// @return {Color | null}
@function palette($palette, $tone: "base") {
	@if not map-has-key($palettes, $palette) {
		@return throw("Palette does not exist in `$palettes`: "#{$palette}"");
	}
	@if not map-has-key(map-get($palettes, $palette), $tone) {
		@return throw("Tone does not exist in palette "#{$palette}": "#{$tone}"");
	}

	@return map-get(map-get($palettes, $palette), $tone);
}

/// Returns a specified palette tone from the palette map.
/// @type Function
/// @requires {variable} $fonts - The map of fonts.
/// @param {String} $font - The font to use.
/// @throws If `$font` does not exist in the `$fonts` map.
/// @return {List}
@function font($font) {
	$font: to-lower-case($font);

	@if $font == null or $font == default {
		@return map-get($fonts, default);
	}
	@if map-has-key($fonts, $font) {
		@return join(map-get($fonts, $font), map-get($fonts, default), comma);
	}

	@return throw("Unknown font `#{$font}` in $fonts.");
}

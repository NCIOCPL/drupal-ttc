<?php

/**
 * @file
 * Code for the TTC Views feature.
 */

include_once 'ttc_views.features.inc';

function ttc_views_views_pre_render(&$view) {
    // if the view is abstract_rss
    if ($view->name == 'abstracts_rss' && isset($view->args[0])) {
        // retrieve the first argument, which should be a dash-delimited product 
        // type name
        $term_name = str_replace('-', ' ', $view->args[0]);
        $terms = taxonomy_get_term_by_name($term_name, 'product_type');
        
        // if terms are found...
        if(!empty($terms)) {
            // retrieve the first match
            $term = reset($terms);
            
            // update the view title
            $title = $term->name;
            $view->build_info['title'] = "TTC $title";
        }
    }

    if($view->current_display == 'abstract_xml') {
        // declare static field sets
        static $fields_to_retrieve = array(
            'field_field_inventors' => array(
                'field_is_lead',
                'field_first_name',
                'field_middle_initial',
                'field_last_name',
                'field_suffix',
                'field_url',
                'field_division_name',
            ),
            'field_field_publications' => array(
                'field_title',
                'field_url'
            ),
            'field_field_pat_status' => array(
                'field_is_related_patent',
                'field_patent_status',
                'field_application_number',
                'field_patent_authority',
                'field_patent_number',
                'field_add_pat_desc',
                'field_patent_filing_date',
                'field_patent_issue_date',
            )
        );

        $view->extracted_values = array();

        foreach($view->result as $r => $result) {
            // retrieve the unpublished date for each nid
            $nid = $view->result[$r]->nid;
            $date = _get_unpublished_date($nid);
            $view->result[$r]->nid = _get_unpublished_date($view->result[$r]->nid);

            foreach($fields_to_retrieve as $field_collection => $fields) {
                $values = _get_field_values($result, $field_collection, $fields);

                $view->result[$r]->extracted_values[$field_collection] = $values;
            }
        }
    }
}

function _get_unpublished_date($nid) {
    $published = db_select('workbench_moderation_node_history', 'p_top')
        ->fields('p_top')
        ->condition('p_top.nid', $nid)
        ->condition('p_top.state', 'published')
        ->orderBy('p_top.hid', 'DESC')
        ->range(0,1);

    $archived = db_select('workbench_moderation_node_history', 'a')
        ->condition('a.nid', $nid)
        ->condition('a.state', 'archived')
        ->orderBy('a.hid', 'ASC')
        ->range(0,1);

    $archived->addField('a', 'stamp', 'archive_stamp');

    $publishedAlias = $archived->join($published, 'p', 'a.hid >= p.hid');

    $result = $archived->execute();

    $date = false;

    foreach ($result as $r => $record) {
        // Do something with each $record
        $stamp = $record->archive_stamp;
        $date = date('Y-m-d', $stamp);
        break;
    }

    return $date;
}

function _get_field_values($result, $field_collection, $fields) {
    $values = array();

    foreach($result->$field_collection as $delta => $collection) {
        if(isset($collection['rendered']['entity']['field_collection_item'])) {
            $entity = reset($collection['rendered']['entity']['field_collection_item']);

            foreach($fields as $field) {
                if(isset($entity[$field]['#items'])) {
                    $values[$delta][$field] = reset($entity[$field]['#items']);
                }
            }
        }
    }

    return $values;
}

/***
 * Override of MODULE_preprocess_HOOK to add image enclosures to RSS if the 
 * image field is available.
 */
function ttc_views_preprocess_views_view_row_rss(&$variables, $hook) {
    // find the id of the row in the results (id is base-1, results use base-0)
    $id = $variables['id'];
    $results = $variables['view']->result;
    
    // if the id is within the results
    if(sizeof($results) >= $id) {
        // retrieve the row's result (a partially-filled node object)
        $result = $results[$id-1];
        
        // also retrieve a reference to the row to update the XML elements
        // with an enclosure containing the image's information
        $item = &$variables['row'];

        // if an image exists...
        if(isset($result->field_field_image[0]['raw'])) {
            // retrieve the image information
            $image = $result->field_field_image[0];
            
            $item->elements[] = array(
              'key' => 'enclosure',
              // file_create_url generates an absolute URL from the image's URI
              'attributes' => array(
                  'url' => file_create_url($image['raw']['uri']),
                  'length' => $image['raw']['filesize'],
                  'type' => $image['raw']['filemime'],
                  ),
            );

            // update the item_elements with the formatted xml
            $variables['item_elements'] = empty($item->elements) ? '' : format_xml_elements($item->elements);
        
        }
    
    }
}
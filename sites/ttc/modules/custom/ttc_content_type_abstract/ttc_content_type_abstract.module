<?php

/**
 * @file
 * Code for the TTC Content Type: Abstract feature.
 */
include_once 'ttc_content_type_abstract.features.inc';
include_once 'ttc_content_type_abstract.hooks.inc';

/**
 * Implements hook_menu().
 */
function ttc_content_type_abstract_menu() {
    $items['pdf/%ttc_content_type_abstract_enumber'] = array(
        'title' => 'Generate Abstract PDF',
        'page callback' => 'ttc_content_type_abstract_generate_pdf',
        'page arguments' => array(1),
        'access callback' => '_ttc_content_type_abstract_attributes_access',
        'access arguments' => array(1),
        'type' => MENU_LOCAL_TASK,
        'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    );

    $items['abstracts.xml'] = array(
        'page callback' => 'ttc_content_type_abstract_xml',
        'access callback' => TRUE,
        'type'=> MENU_CALLBACK,
    );

    return $items;
}

function ttc_content_type_abstract_enumber_load($filename) {

    // extract the enum from the filename
    $matches = array();
    $result = preg_match('~([^.]+)\.pdf~', $filename, $matches);

    if (!$result)
        return FALSE;

    // if matched, the first result should be the enumber
    $enumber = $matches[1];

    // set up a field query to find nodes matching this enumber
    $query = new EntityFieldQuery();

    $query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'abstract')
        ->propertyCondition('status', NODE_PUBLISHED)
        ->fieldCondition('field_enumber', 'value', strtolower($enumber), '=');

    $query_result = $query->execute();

    if (isset($query_result['node'])) {
        $nids = array_keys($query_result['node']);
        $nodes = entity_load('node', $nids);
        $node = array_pop($nodes);

        // if a node exists, return it
        if (isset($node)) {
            return $node;
        }
    }

    return FALSE;
}

/**
 * Generate HTML of a given node.
 *
 * @return bool
 *   TRUE if PDF is successfully generated and FALSE if it isn't.
 */
function ttc_content_type_abstract_generate_pdf($node) {

    if (variable_get('pdf_using_mpdf_type_abstract') == 0) {
        drupal_goto(urlencode('node') . '/' . $node->nid);
        return;
    }

    if (!node_access('view', $node)) {
        drupal_set_message(t('You are not authorized to generate PDF for this page.'), 'warning');
        drupal_goto(urlencode('node') . '/' . $node->nid);
        return;
    }
    if (empty($node)) {
        drupal_get_messages('error');
        drupal_set_message(t('PDF cannot be generated for this path.'), 'error');
        return;
    }

    // Checking mPDF library existence.
    if (pdf_using_mpdf_library_exist() == TRUE) {
        $pdf_using_mpdf_pdf_filename = variable_get('pdf_using_mpdf_pdf_filename');
        $pdf_using_mpdf_pdf_filename = token_replace($pdf_using_mpdf_pdf_filename, array('node' => $node));

        //$view = node_view($node);
        $view = node_view($node, 'PDF');
        $html = drupal_render($view);

        _pdf_using_mpdf_generator($html, $pdf_using_mpdf_pdf_filename);
    } else {
        drupal_set_message(t('mPDF library is not included. Please check your "sites/all/libraries" directory or " /sites/your-domain-name/libraries/ directory " or "!default_module_path" directory.', array(
            '!default_module_path' => drupal_get_path('module', 'pdf_using_mpdf'),
        )), 'warning');
        drupal_goto(urlencode('node') . '/' . $node->nid);
        return;
    }
}

/**
 * Check for generate PDF permission.
 *
 * @param string $filename
 *   Filename of the desired PDF.
 *
 * @return bool
 *   TRUE if permision allow and FALSE if access denied.
 */
function _ttc_content_type_abstract_attributes_access($filename) {

    if (user_access('generate pdf using mpdf')) {
        if (variable_get('pdf_using_mpdf_type_abstract') == 1) {
            return TRUE;
        } else {
            return FALSE;
        }
    }
    return FALSE; // TRUE or you can user user_access() permissions as well
}

/**
 * Outputs the cached abstract xml.
 */
function ttc_content_type_abstract_xml() {
    // retrieve thhe abstract xml from cache
    $xml = cache_get('abstract_xml', 'cache');

    drupal_add_http_header('Content-Type', 'text/xml; charset=utf-8');

    if($xml) {
        print $xml->data;
    }

    drupal_exit();
}

/**
 * Generate the xml feed of all valid abstract data.
 *
 * @return bool
 *   The XML string if generated, FALSE otherwise.
 *   (Some form of XML content will be generated in almost every case, even if empty.)
 */
function ttc_content_type_abstract_cache_xml() {
    // query for abstracts with send_to_ott set or in the archived state
    $query = _ttc_content_type_abstract_build_current_query();

    $results = $query->execute();
    $nodes = $results->fetchAllAssoc('nid');
    $count = count($nodes);

    field_attach_load_revision('node', $nodes, array('field_id' => 'field_xml'));

    $output = array();

    $output[] = '<?xml version="1.0" encoding="UTF-8" ?>';
    $output[] = '<Technologies>';

    $populated = 0;

    foreach($nodes as $node) {
        if(isset($node->field_xml[LANGUAGE_NONE]['0']['value'])) {
            $output[] = '<Technology>';
            $output[] = $node->field_xml[LANGUAGE_NONE]['0']['value'];
            $output[] = '</Technology>';

            $populated++;
        }
    }

    $output[] = '</Technologies>';

    $xml = implode(' ', $output);

    watchdog('ttc_content_type_abstract', "Caching abstract xml ($count nodes found, $populated with populated xml cache fields)");

    cache_set('abstract_xml', $xml, 'cache');
}

/**
 * cron hook - add all abstract nodes without populated XML to the queue
 */
function ttc_content_type_abstract_cron() {
    try {
        // create node and history queries

        _ttc_content_type_abstract_cron_abstracts_xml();
        // _ttc_content_type_abstract_cron_notifications();
        _ttc_content_type_abstract_cron_time_notifications();

    }
    catch(Exception $e){
        watchdog('ttc_content_type_abstract', $e->getMessage() . "\n" . $e->getTraceAsString());
    }
}

//3 (1065), 6 (2190), and 10 (3650) year notification
function _ttc_content_type_abstract_cron_time_notifications(){
//3 year query
    $query = db_select('node', 'n');
    $query->distinct();
    $query->join('field_data_field_opp_start_date', 'b', 'n.nid = b.entity_id');
    $query->leftJoin('field_data_field_3_year_warned', 'c', 'n.nid = c.entity_id');
    $query->condition('n.status', 1, '=')
        ->condition('n.type', 'abstract', '=')
        ->fields('n', array('nid'))
    ;
    $query->where(' datediff(now(), from_unixtime(b.field_opp_start_date_value)) >= 1065 ' );
    $query->where(' datediff(now(), from_unixtime(b.field_opp_start_date_value)) < 2190 ' );
    $query->where('(
	  c.field_3_year_warned_value <> 1 or c.field_3_year_warned_value is null)');
    $results = $query->execute();
    watchdog('ttc_content_type_abstract', "Cron task found %count abstracts more than 3 years old.",
        array('%count' => $results->rowCount()));
    foreach($results as $result) {
           _ttc_content_type_abstract_cron_notify_message($result->nid,'3');
    }
//6 year query
    $query = db_select('node', 'n');
    $query->distinct();
    $query->join('field_data_field_opp_start_date', 'b', 'n.nid = b.entity_id');
    $query->leftJoin('field_data_field_6_year_warned', 'c', 'n.nid = c.entity_id');
    $query->condition('n.status', 1, '=')
        ->condition('n.type', 'abstract', '=')
        ->fields('n', array('nid'))
    ;
    $query->where(' datediff(now(), from_unixtime(b.field_opp_start_date_value)) >= 2190 ' );
    $query->where(' datediff(now(), from_unixtime(b.field_opp_start_date_value)) < 3650 ' );
    $query->where('(
	  c.field_6_year_warned_value <> 1 or c.field_6_year_warned_value is null)');
    $results = $query->execute();
    watchdog('ttc_content_type_abstract', "Cron task found %count abstracts more than 6 years old.",
        array('%count' => $results->rowCount()));
    foreach($results as $result) {
        _ttc_content_type_abstract_cron_notify_message($result->nid,'6');
    }
//10 year query
    $query = db_select('node', 'n');
    $query->distinct();
    $query->join('field_data_field_opp_start_date', 'b', 'n.nid = b.entity_id');
    $query->leftJoin('field_data_field_10_year_warned', 'c', 'n.nid = c.entity_id');
    $query->condition('n.status', 1, '=')
        ->condition('n.type', 'abstract', '=')
        ->fields('n', array('nid'))
    ;
    $query->where(' datediff(now(), from_unixtime(b.field_opp_start_date_value)) >= 3650 ' );
    $query->where('(
	  c.field_10_year_warned_value <> 1 or c.field_10_year_warned_value is null)');
    $results = $query->execute();
    watchdog('ttc_content_type_abstract', "Cron task found %count abstracts more than 10 years old.",
        array('%count' => $results->rowCount()));
    foreach($results as $result) {
        _ttc_content_type_abstract_cron_notify_message($result->nid,'10');
    }

}
function _ttc_content_type_abstract_cron_notifications(){

    $query = db_select('node', 'n');
    $query->distinct();
    $query->join('field_data_field_opp_end_date', 'b', 'n.nid = b.entity_id');
    $query->leftJoin('field_data_field_opp_30day_warned', 'c', 'n.nid = c.entity_id');
    $query->condition('n.status', 1, '=')
        ->condition('n.type', 'abstract', '=')
        ->fields('n', array('nid'))
    ;
    $query->where(' datediff(from_unixtime(b.field_opp_end_date_value),now()) <= 30 ' );
    $query->where(' datediff(from_unixtime(b.field_opp_end_date_value),now()) >= 0 ' );
    $query->where('(
	  c.field_opp_30day_warned_value <> 1 or c.field_opp_30day_warned_value is null
  )');
    $results = $query->execute();
    watchdog('ttc_content_type_abstract', "Cron task found %count abstracts within 30 days of expiring.",
        array('%count' => $results->rowCount()));
    foreach($results as $result) {
        _ttc_content_type_abstract_cron_notify_30day($result->nid);
    }
}
function _ttc_content_type_abstract_cron_notify_message($nid,$time_period){
    $node = node_load($nid);

    global $conf;
    $email_to = $conf['notifications_email'];
    $title = $node->title;
    $nih_reference_no  = $node->field_enumber['und']['0']['value'];
    // Send email notification

    $message = 'The abstract associated with ' . $title . ' ' . $nih_reference_no . ' was posted ' .
        $time_period . ' years ago. Please work with the inventor(s) to update any parts that have changed and send back a revised copy. Especially important:

1. Summary
2. Collaboration Opportunity (Co-development and/or License)
3. Experimental results in the Description of Technology
4. Development Stage
5. Patent Status
6. Publications

Best regards,

TTC Website Admin';
    // Send the email.


    $params = array(
        'subject' => 'Notice Abstract Posted ' . $time_period . ' years ago: ' . $nih_reference_no,
        'body' => check_markup(
            t($message),
            'plain_text'
        ),
    );

    $notification = str_replace(' ', '_', $time_period) . '_year_notify';
    drupal_mail('ttc_content_type_abstract', $notification, $email_to, language_default(), $params);
    $warning_field = 'field_' . $time_period . '_year_warned';
    $node->$warning_field['und'][0]['value'] = '1';
    node_save($node);
}

function _ttc_content_type_abstract_cron_notify_30day($nid){
    $node = node_load($nid);

    global $conf;
    $email_to = $conf['notifications_email'];
    $title = $node->title;
    $nih_reference_no  = $node->field_enumber['und']['0']['value'];
    // Send email notification

    $message = "The abstract associated with $title $nih_reference_no is due to expire in 30 days. Please work with the inventor(s) to update any parts that have changed and send back a revised copy. Especially important:

1. Summary
2. Collaboration Opportunity (Co-development and/or License)
3. Experimental results in the Description of Technology
4. Development Stage
5. Patent Status
6. Publications

Best regards,

TTC Website Admin";
    // Send the email.
    $params = array(
        'subject' => 'Notice of Abstract Expiration ' . $nih_reference_no,
        'body' => check_markup(
            t($message),
            'plain_text'
        ),
    );
    drupal_mail('ttc_content_type_abstract', '30day_notify', $email_to, language_default(), $params);


    $num_updated = db_update('field_data_field_opp_30day_warned')
        ->fields(array(
            'field_opp_30day_warned_value' => 1,
        ))
        ->condition('entity_id', $nid,  '=')
        ->execute();


    $num_updated = db_update('field_revision_field_opp_30day_warned')
        ->fields(array(
            'field_opp_30day_warned_value' => 1,
        ))
        ->condition('entity_id', $nid,  '=')
        ->execute();

}



function _ttc_content_type_abstract_cron_abstracts_xml(){
    $query = _ttc_content_type_abstract_build_current_query();

    // add check for null xml fields
    $xml = db_select('field_revision_field_xml', 'x');
    $xml->rightJoin($query, 'a', 'x.entity_id = a.nid AND x.revision_id = a.vid');
    $xml->isNull('x.field_xml_value');

    $xml->fields('a', array('nid', 'vid', 'type'));

    $results = $xml->execute();

    watchdog('ttc_content_type_abstract', "Cron task found %count empty abstract xml fields.",
        array('%count' => $results->rowCount()));

    foreach($results as $result) {
        _ttc_content_type_abstract_queue_xml($result);
    }

    // add the xml generation request on the end
    _ttc_content_type_abstract_queue_xml('cache_xml');

}
function ttc_content_type_abstract_field_attach_view_alter(&$output, $context) {
  if(isset($output['field_contact_auto'])) {
    $tid = $output['field_contact_auto']['#items']['0']['tid'];
    $term = taxonomy_term_load($tid);

    if($term) {
      // render the term into the field
      $output['field_contact_auto'][0] = taxonomy_term_view($term, $context['view_mode']);
    }
    else {
      unset($output['field_contact_auto']['#items']);
    }
  }
}
